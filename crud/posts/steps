=>create laravel application and configure the env create database in mysql and add it in env

=>run this:php artisan make:model Post -mcr
this will create Model,Migration and Controller

=>define the table structure in migration file and run php artisan migrate

_Add this in routes/web.php_

use App\Http\Controllers\PostController;

Route::resource('posts', PostController::class);

_It will create routes for posts/index,create,store,edit,update,destroy_

=>create controller file and // app/Models/Post.php
protected $fillable = ['title', 'body'];

create views in resources/views/posts folder index/create/edit

this is complete.

//auth santum role bases //

<?php

// This is a simplified Laravel 12 application setup using Sanctum and Spatie Permissions

// 1. Run these commands to set up the project:
// composer create-project laravel/laravel:^12.0 laravel-sanctum-spatie
// cd laravel-sanctum-spatie
// composer require laravel/sanctum
// composer require spatie/laravel-permission
// php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
// php artisan migrate

// Add Sanctum middleware to app/Http/Kernel.php

'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    'throttle:api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],

// In config/auth.php, ensure:
// 'guards' => [ 'api' => [ 'driver' => 'sanctum', ... ] ]

// 2. User model setup
// app/Models/User.php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable, HasRoles;

    protected $fillable = [ 'name', 'email', 'password' ];
    protected $hidden = [ 'password', 'remember_token' ];
}

// 3. AuthController
// app/Http/Controllers/AuthController.php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'password' => 'required|confirmed'
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        $user->assignRole('user');

        return response()->json(['message' => 'User registered']);
    }

    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        $user = User::where('email', $request->email)->first();

        if (! $user || ! Hash::check($request->password, $user->password)) {
            throw ValidationException::withMessages([
                'email' => ['The provided credentials are incorrect.'],
            ]);
        }

        return response()->json([
            'token' => $user->createToken('api-token')->plainTextToken
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->tokens()->delete();
        return response()->json(['message' => 'Logged out']);
    }
}

// 4. Routes setup
// routes/api.php

use App\Http\Controllers\AuthController;
use Illuminate\Support\Facades\Route;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

Route::middleware(['auth:sanctum'])->group(function () {
    Route::post('/logout', [AuthController::class, 'logout']);

    Route::get('/user', function (Request $request) {
        return $request->user();
    });

    Route::get('/admin-data', function () {
        return ['data' => 'Only for admins'];
    })->middleware('role:admin');
});

// 5. Role Seeder (optional)
// database/seeders/RoleSeeder.php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;

class RoleSeeder extends Seeder
{
    public function run(): void
    {
        Role::create(['name' => 'admin']);
        Role::create(['name' => 'user']);
    }
}

// Run: php artisan db:seed --class=RoleSeeder

// Done! You now have:
// - Registration + Login via Sanctum
// - Role assignment using Spatie
// - Protected route with role-based middleware

<?php

// Laravel 12 + Sanctum + Spatie Permission + CRUD with Role-Based Access

// -- CONTROLLER: PostController --
// app/Http/Controllers/PostController.php

namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;

class PostController extends Controller
{
    public function index()
    {
        return Post::all();
    }

    public function store(Request $request)
    {
        $this->authorize('create-post');

        $request->validate([
            'title' => 'required|string|max:255',
            'content' => 'required|string',
        ]);

        return Post::create($request->only('title', 'content'));
    }

    public function show(Post $post)
    {
        return $post;
    }

    public function update(Request $request, Post $post)
    {
        $this->authorize('update-post');

        $post->update($request->only('title', 'content'));
        return $post;
    }

    public function destroy(Post $post)
    {
        $this->authorize('delete-post');

        $post->delete();
        return response()->json(['message' => 'Deleted successfully']);
    }
}

// -- MODEL: Post --
// app/Models/Post.php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $fillable = ['title', 'content'];
}

// -- MIGRATION: create_posts_table --
// database/migrations/xxxx_xx_xx_create_posts_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('posts');
    }
};

// -- SEEDER: PermissionSeeder --
// database/seeders/PermissionSeeder.php

namespace Database\Seeders;

use Spatie\Permission\Models\Permission;
use Illuminate\Database\Seeder;

class PermissionSeeder extends Seeder
{
    public function run(): void
    {
        Permission::create(['name' => 'create-post']);
        Permission::create(['name' => 'update-post']);
        Permission::create(['name' => 'delete-post']);
    }
}

// Run: php artisan db:seed --class=PermissionSeeder

// Assign permissions to roles in tinker or RoleSeeder
// $adminRole = Role::findByName('admin');
// $adminRole->givePermissionTo(['create-post', 'update-post', 'delete-post']);

// -- ROUTES: routes/api.php --

use App\Http\Controllers\PostController;

Route::middleware(['auth:sanctum'])->group(function () {
    Route::apiResource('posts', PostController::class);
});

// -- AUTHORIZATION: app/Providers/AuthServiceProvider.php --

use Illuminate\Support\Facades\Gate;
use App\Models\User;

public function boot(): void
{
    $this->registerPolicies();

    Gate::define('create-post', fn(User $user) => $user->hasPermissionTo('create-post'));
    Gate::define('update-post', fn(User $user) => $user->hasPermissionTo('update-post'));
    Gate::define('delete-post', fn(User $user) => $user->hasPermissionTo('delete-post'));
}

// âœ… Final Notes:
// - Authenticated users with proper permissions can manage posts
// - Permissions controlled via Spatie Role & Permission system
// - Use Postman or front-end to test CRUD with token auth

